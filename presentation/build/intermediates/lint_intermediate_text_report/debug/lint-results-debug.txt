/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/drawable/ic_login_background_b.xml:2: Warning: Limit vector icons sizes to 200×200 to keep icon drawing fast; see https://developer.android.com/studio/write/vector-asset-studio#when for more [VectorRaster]
    android:width="278dp"
                   ~~~~~
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/drawable/ic_login_background_t.xml:2: Warning: Limit vector icons sizes to 200×200 to keep icon drawing fast; see https://developer.android.com/studio/write/vector-asset-studio#when for more [VectorRaster]
    android:width="360dp"
                   ~~~~~

   Explanation for issues of type "VectorRaster":
   Vector icons require API 21 or API 24 depending on used features, but when
   minSdkVersion is less than 21 or 24 and Android Gradle plugin 1.4 or higher
   is used, a vector drawable placed in the drawable folder is automatically
   moved to drawable-anydpi-v21 or drawable-anydpi-v24 and bitmap images are
   generated for different screen resolutions for backwards compatibility.

   However, there are some limitations to this raster image generation, and
   this lint check flags elements and attributes that are not fully supported.
   You should manually check whether the generated output is acceptable for
   those older devices.

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/build.gradle.kts:50: Warning: If you plan to use data binding in a Kotlin project, you should apply the kotlin-kapt plugin. [DataBindingWithoutKapt]
        dataBinding = true
        ~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DataBindingWithoutKapt":
   Apps that use Kotlin and data binding should also apply the kotlin-kapt
   plugin.

   https://kotlinlang.org/docs/reference/kapt.html

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/java/com/kdn/stack_knowledge_android/utils/FileUtil.kt:31: Warning: This InputStream should be freed up after use with #close() [Recycle]
    val inputStream = context.contentResolver.openInputStream(uri)
                                              ~~~~~~~~~~~~~~~

   Explanation for issues of type "Recycle":
   Many resources, such as TypedArrays, VelocityTrackers, etc., should be
   recycled (with a recycle() call) after use. This lint check looks for
   missing recycle() calls.

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/drawable-v24: Warning: This folder configuration (v24) is unnecessary; minSdkVersion is 29. Merge all the resources in this folder into drawable. [ObsoleteSdkInt]
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/mipmap-anydpi-v26: Warning: This folder configuration (v26) is unnecessary; minSdkVersion is 29. Merge all the resources in this folder into mipmap-anydpi. [ObsoleteSdkInt]

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/layout/activity_login.xml:4: Warning: Possible overdraw: Root element paints background @color/white with a theme that also paints a background (inferred theme is @style/Theme.AppCompat.NoActionBar) [Overdraw]
    android:background="@color/white">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/values/colors.xml:3: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/values/colors.xml:4: Warning: The resource R.color.purple_500 appears to be unused [UnusedResources]
    <color name="purple_500">#FF6200EE</color>
           ~~~~~~~~~~~~~~~~~
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/values/colors.xml:5: Warning: The resource R.color.purple_700 appears to be unused [UnusedResources]
    <color name="purple_700">#FF3700B3</color>
           ~~~~~~~~~~~~~~~~~
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/values/colors.xml:6: Warning: The resource R.color.teal_200 appears to be unused [UnusedResources]
    <color name="teal_200">#FF03DAC5</color>
           ~~~~~~~~~~~~~~~
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/values/colors.xml:7: Warning: The resource R.color.teal_700 appears to be unused [UnusedResources]
    <color name="teal_700">#FF018786</color>
           ~~~~~~~~~~~~~~~
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/font/font.xml:2: Warning: The resource R.font.font appears to be unused [UnusedResources]
<font-family xmlns:android="http://schemas.android.com/apk/res/android">
^
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/drawable/ic_kdn_logo.xml:1: Warning: The resource R.drawable.ic_kdn_logo appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/drawable/ic_launcher_background.xml:2: Warning: The resource R.drawable.ic_launcher_background appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/drawable-v24/ic_launcher_foreground.xml:1: Warning: The resource R.drawable.ic_launcher_foreground appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml:2: Warning: The resource R.mipmap.ic_launcher_round appears to be unused [UnusedResources]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/values/themes.xml:3: Warning: The resource R.style.Theme_StackKnowledgeAndroid appears to be unused [UnusedResources]
    <style name="Theme.StackKnowledgeAndroid" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/mipmap-anydpi-v26/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/Users/chaejong-in/AndroidStudioProjects/StackKnowledgeAndroid/presentation/src/main/res/layout/activity_main.xml:75: Warning: Consider replacing android:layout_marginRight with android:layout_marginEnd="6dp" to better support right-to-left layouts [RtlHardcoded]
        android:layout_marginRight="6dp"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "RtlHardcoded":
   Using Gravity#LEFT and Gravity#RIGHT can lead to problems when a layout is
   rendered in locales where text flows from right to left. Use Gravity#START
   and Gravity#END instead. Similarly, in XML gravity and layout_gravity
   attributes, use start rather than left.

   For XML attributes such as paddingLeft and layout_marginLeft, use
   paddingStart and layout_marginStart. NOTE: If your minSdkVersion is less
   than 17, you should add both the older left/right attributes as well as the
   new start/end attributes. On older platforms, where RTL is not supported
   and the start/end attributes are unknown and therefore ignored, you need
   the older left/right attributes. There is a separate lint check which
   catches that type of error.

   (Note: For Gravity#LEFT and Gravity#START, you can use these constants even
   when targeting older platforms, because the start bitmask is a superset of
   the left bitmask. Therefore, you can use gravity="start" rather than
   gravity="left|start".)

0 errors, 20 warnings
